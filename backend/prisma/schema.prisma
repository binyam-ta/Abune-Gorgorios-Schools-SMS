// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// generator dbml {
//   provider = "prisma-dbml-generator"
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model School {
  id Int @id @default(autoincrement())

  school_name    String
  school_address String
  school_phone   String
  

  createdAT    DateTime   @default(now())
  updatedAT    DateTime   @updatedAt
  User         User[]
  gradelevel   GradeLevel[]

  @@index([id])
  @@map("schools")
}

model User {
  id            Int       @id @default(autoincrement())
  frist_name    String
  middle_name   String
  last_name     String
  username      String?
  email         String    @unique
  role          String
  address       String?
  image         String?
  phone         String
  password      String
  status        String? @default("active")
  gender        String
  date_of_birth String
  loggedInAt    DateTime?
  createdAT DateTime @default(now())
  updatedAT DateTime @updatedAt

  school_Id Int?
  school    School?   @relation(fields: [school_Id], references: [id])
  Student   Student[]
  Teacher   Teacher[]

  @@index([id, email])
  @@map("users")
}

model Teacher {
  // id              Int    @id @default(autoincrement())
  education_level String

  user_Id        Int              @id
  user           User             @relation(fields: [user_Id], references: [id])
  result         Result[]
  subject        Subject[]
  gradelevel     GradeLevel[]
  courseMaterial CourseMaterial[]
  section        Section[] //@relation("TeacherSections", references: [id])

  @@map("teachers")
}

model Student {
  // id              Int     @id @default(autoincrement())

  careof_contact1 String
  careof_contact2 String?

  user_Id Int  @id
  user    User @relation(fields: [user_Id], references: [id])

  gradeId    Int
  gradelevel GradeLevel @relation(fields: [gradeId], references: [id])

  sectionId   Int
  section     Section @relation(fields: [sectionId], references: [id])
  firstrank   Int?
  secondtrank Int?
  overallrank Int?

  firstScore   Float?
  secondScore  Float?
  overallScore Float?

  subject         Subject[]
  result          Result[]
  student_history StudentHistory[]

  @@map("students")
}

model GradeLevel {
  id        Int     @id @default(autoincrement())
  grade     String
  gradewithschool String? @unique
  classType String?

  //Make the teacherId optional !
  section        Section[]
  subject        Subject[]
  student        Student[]
  result         Result[]
  courseMaterial CourseMaterial[]
  schoolId   Int?
  school     School? @relation(fields: [schoolId], references: [id])

  //Make the teacherId optional !
  teacher Teacher[]

  // other fields specific to GradeLevel
}

model Section {
  id         Int        @id @default(autoincrement())
  name       String
  gradeId    Int
  gradelevel GradeLevel @relation(fields: [gradeId], references: [id])
  schoolId   Int?
  student Student[]
  teacher Teacher[]
   subjects    Subject[] @relation(name: "SubjectSection")

  @@map("sections")
}

model Reset {
  id Int @id @default(autoincrement())
  userId Int
  shortcode String
  createdAT    DateTime   @default(now())
  expiresAt    DateTime 
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String
  // other fields specific to Subject
  student   Student[]
  result    Result[]
 sections  Section[] @relation(name: "SubjectSection")
  teacherId Int?
  schoolId Int?
  teacher   Teacher?  @relation(fields: [teacherId], references: [user_Id])

  courseMaterial CourseMaterial[]
  gradeId        Int?
  gradelevel     GradeLevel?      @relation(fields: [gradeId], references: [id])
}

model Result {
  id               Int    @id @default(autoincrement())
  test1            Float?
  assignmentScore1 Float?
  midtermScore1    Float?
  finalExamScore1  Float?
  totalScore1      Float?

  test2            Float?
  assignmentScore2 Float?
  midtermScore2    Float?
  finalExamScore2  Float?
  totalScore2      Float?
  sectionId        Int?

  teacher   Teacher @relation(fields: [teacherId], references: [user_Id])
  teacherId Int
  studentId Int
  student   Student @relation(fields: [studentId], references: [user_Id])

  subjectId Int
  subject   Subject @relation(fields: [subjectId], references: [id])

  gradeLevelId Int
  gradeLevel   GradeLevel @relation(fields: [gradeLevelId], references: [id])

  @@unique([subjectId, studentId])
  @@map("results")
}

model SchoolYear {
  id         Int    @id @default(autoincrement())
  name       String
  start_date String
  end_date   String

  term   Term[]
 
}

model Term {
  id           Int        @id @default(autoincrement())
  name         String
  start_date   String
  end_date     String
  schoolYearId Int
  schoolYear   SchoolYear @relation(fields: [schoolYearId], references: [id])
}

model StudentHistory {
  id            Int      @id @default(autoincrement())
  studentId     Int
  student       Student  @relation(fields: [studentId], references: [user_Id])
  gradeId       Int
  sectionId     Int
  totalScore1   Int
  totalScore2   Int
  overallScore  Int
  firstRank     Int
  secondRank    Int
  overallRank   Int
  subjectScores Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Calander {
  sub    Int     @id @default(autoincrement())
  id     Float
  title  String
  start  String
  allDay Boolean
  schoolId Int?
}

model CourseMaterial {
  id          Int    @id @default(autoincrement())
  description String
  file        String @unique // Assuming the file is stored as a string representing the file path
  // Add other attributes such as file type, size, upload date, etc. as needed

  // Define the many-to-one relationship with Teacher
  teacher    Teacher      @relation(fields: [teacherId], references: [user_Id])
  teacherId  Int
  // Define the many-to-one relationship with Subject
  subject    Subject?     @relation(fields: [subjectId], references: [id])
  subjectId  Int?
  schoolId Int?
  gradeLevel GradeLevel[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}
